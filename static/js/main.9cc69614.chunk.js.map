{"version":3,"sources":["components/Weather.js","components/Clock.js","data/quotes.js","App.js","serviceWorker.js","index.js"],"names":["Weather","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","one","two","three","four","five","inherits","createClass","key","value","setState","initIcons","react_default","a","createElement","className","alt","src","React","Component","Clock","time","Date","toLocaleTimeString","hour","minute","daydate","_this2","timerID","setInterval","tick","clearInterval","date","myDay","getDay","myDate","getDate","myMonth","getMonth","jsonData","quote","author","App","quoteAuthor","updateQuote","bind","assertThisInitialized","length","item","Math","floor","random","Clock_Clock","Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cc69614.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport class Weather extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { one: '', two: '', three: '', four: '', five: ''};\n    }\n\n    initIcons() {\n        this.setState({\n            one: \"https://darksky.net/images/weather-icons/clear-day.png\",\n            two: \"https://darksky.net/images/weather-icons/cloudy.png\",\n            three: \"https://darksky.net/images/weather-icons/clear-day.png\",\n            four: \"https://darksky.net/images/weather-icons/clear-night.png\",\n            five: \"https://darksky.net/images/weather-icons/clear-night.png\"\n        });\n    }\n\n    componentDidMount() {\n        this.initIcons();\n\n        //https://api.darksky.net/forecast/a8deb7086d8b0a4584ce78ecc82c05cc/53.283818,-6.205588\n\n        /*axios.get(``)\n        .then(res => {\n            console.log(res);\n        })\n        .catch(err => {\n            // Something went wrong. Save the error in state and re-render.\n            console.log(err);\n        });*/\n\n      }\n\n    render() {\n        return (\n            <div className=\"weather\">\n                <ul>\n                    <li><img className=\"icon\" alt=\"clear-day\" src={this.state.one}/></li>\n                    <li><img className=\"icon\" alt=\"clear-day\" src={this.state.two}/></li>\n                    <li><img className=\"icon\" alt=\"clear-day\" src={this.state.three}/></li>\n                    <li><img className=\"icon\" alt=\"clear-day\" src={this.state.four}/></li>\n                    <li><img className=\"icon\" alt=\"clear-day\" src={this.state.five}/></li>\n                </ul>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport class Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),\n                      daydate: ''};\n    }\n\n    componentDidMount() {\n      this.timerID = setInterval(() => this.tick(), 60000); // once a minute\n      this.tick();\n    }\n\n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n\n    tick() {\n      var date = new Date();\n  \n      this.setState({\n        time: date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n      })\n  \n      var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  \n      var myDay = days[date.getDay()];\n      var myDate = date.getDate();\n      var myMonth = months[date.getMonth()];\n  \n      this.setState({\n        daydate: myDay + ' ' + myDate + ' ' + myMonth\n      })\n    }\n\n    render() {\n        return (\n            <div className=\"clock\">\n              <h2>{this.state.time}</h2>\n              <h4>{this.state.daydate}</h4>\n            </div>\n        )\n    }\n}","var jsonData = {data: [\n  {\n    \"quote\" : \"He who has a ‘why’ can live to bear almost any ‘how’\",\n    \"author\" : \"Friedrich Nietzsche\"\n  },\n  {\n    \"quote\" : \"We must all suffer one of two things, the pain of discipline or the pain of regret\",\n    \"author\" : \"\"\n  },\n  {\n    \"quote\" : \"Action expresses priorities\",\n    \"author\" : \"Mahatma Gandhi\"\n  },\n  {\n    \"quote\" : \"The line dividing good and evil cuts through the heart of every human being\",\n    \"author\" : \"Aleksandr Solzhenitsyn\"\n  },\n  {\n    \"quote\" : \"Tell the truth, or at least don't lie\",\n    \"author\" : \"Jordan Peterson\"\n  },\n  {\n    \"quote\" : \"And this too shall pass\",\n    \"author\" : \"\"\n  }\n]};   \nexport { jsonData };","import React, { Component } from 'react';\nimport { Weather } from \"./components/Weather\"\nimport { Clock } from \"./components/Clock\"\nimport './App.css';\nimport { jsonData } from './data/quotes'; // or './module'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {quote: '', quoteAuthor: ''};\n\n    // This binding is necessary to make `this` work in the callback\n    this.updateQuote = this.updateQuote.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateQuote();\n  }\n\n  updateQuote() {\n    //console.log(jsonData.data);\n    var length = jsonData.data.length;\n    var quotes = jsonData.data;\n    \n    /*for (var i = 0; i < length; i++) {\n        var quote = quotes[i];\n        console.log(quote);\n    }*/\n\n    var item = quotes[Math.floor(Math.random()*length)];\n    //console.log(item);\n\n    this.setState({\n      quote: item.quote,\n      quoteAuthor: item.author\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Clock />\n          <Weather />\n          <p>\"{this.state.quote}\"</p>\n          <p className=\"author\">{this.state.quoteAuthor}</p>\n        </header>\n      </div>\n    )  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}